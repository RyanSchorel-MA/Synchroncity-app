version: '3.8'

services:
  # Nginx Web Server
  nginx:
    image: nginx:latest
    ports:
      - "80:80"  # De poort 80 van de host is gekoppeld aan de poort 80 van de container
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro  # Gebruik je eigen Nginx-configuratiebestand
      - ./:/var/www/html  # Koppel de Laravel-app naar de container
    depends_on:
      - laravel  # Wacht totdat de Laravel-app klaar is
      - react    # Wacht totdat de React-app klaar is

  # Laravel (PHP) Web Server
  laravel:
    build:
      context: .
      dockerfile: Dockerfile.laravel  # Bouw vanuit een aangepaste Dockerfile voor Laravel
    ports:
      - "8000:8000"  # De poort 8000 van de host is gekoppeld aan de poort 8000 van de container
    environment:
      DB_HOST: db
      DB_PORT: 3306
      DB_DATABASE: ${DB_NAME:-laravel_db}
      DB_USERNAME: ${DB_USER:-laravel_user}
      DB_PASSWORD: ${DB_PASS:-password}
    volumes:
      - ./:/var/www/html  # Zorg ervoor dat de Laravel-bestanden in de container terechtkomen
    depends_on:
      - db  # Wacht totdat de MySQL-database klaar is

  # React Frontend Server
  react:
    build:
      context: ./react_app  # De map waarin de React-app zich bevindt
      dockerfile: Dockerfile.react  # Gebruik de aangepaste Dockerfile voor de React-app
    ports:
      - "3000:3000"  # De poort 3000 van de host is gekoppeld aan de poort 3000 van de container
    volumes:
      - ./react_app:/app  # Zorg ervoor dat de React-bestanden in de container terechtkomen
    command: npm start  # Start de React-app met npm

  # MySQL Database
  db:
    image: mysql:latest
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASS:-rootpassword}
      MYSQL_DATABASE: ${MYSQL_DB:-laravel_db}
      MYSQL_USER: ${MYSQL_USER:-laravel_user}
      MYSQL_PASSWORD: ${MYSQL_PASS:-password}
    volumes:
      - mysql_data:/var/lib/mysql  # Gegevens worden opgeslagen in een persistent volume

volumes:
  mysql_data:
